#!/usr/bin/env python3

# Copyright (C) 2012-2020
#
# * Volker Diels-Grabsch <v@njh.eu>
# * art0int <zvn_mail@mail.ru>
# * Matthew Fearnley (matthew.w.fearnley@gmail.com)
# * rhn <gihu.rhn@porcupinefactory.org>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

"""Copies files from a remote device"""

import hashlib
import os
import shlex
import struct
import subprocess
import sys

from pathlib import Path


remote_script = open('remote_script.py').read()

class TransferError(RuntimeError):
    def __init__(self, block_no, msg):
        RuntimeError.__init__(self, msg)
        self.block_no = block_no

class IOCounter:
    def __init__(self, in_stream, out_stream):
        self.in_stream = in_stream
        self.out_stream = out_stream
        self.in_total = 0
        self.out_total = 0
    def read_all(self, size=None):
        '''Returns read data, and whether the read was complete'''
        if size is None:
            s = self.in_stream.read()
        else:
            s = self.in_stream.read(size)
        self.in_total += len(s)
        return s, (size is None) or len(s) == size
    def read(self, size=None):
        return self.read_all(size)[0]
    def write(self, s):
        self.out_stream.write(s)
        self.out_total += len(s)
        self.out_stream.flush()


def receive_blocks(in_stream, digest_size):
    future_digests = []
    end_digest = None
    needblocksize = None
    while True:
        if needblocksize is not None:
            header = read_check(in_stream, None, 1)
            if header == b'd':
                future_digests.append(read_check(in_stream, None, digest_size))
            elif header == b'b':
                yield (header,
                    read_check(in_stream, None, needblocksize),
                    read_check(in_stream, None, digest_size))
                needblocksize = None
            elif header == b't':
                end_digest = read_check(in_stream, None, digest_size)
            else:
                raise RuntimeError("Not a valid header: {!r}".format(header))
        elif future_digests:
            needblocksize = yield b'd', future_digests.pop(0)
        elif end_digest:
            yield b't', end_digest
            return
        else:
            header = read_check(in_stream, None, 1)
            if header == b'd':
                needblocksize = yield header, read_check(in_stream, None, digest_size)
            elif header == b't':
                yield b't', read_check(in_stream, None, digest_size)
                return
            elif header == b'b':
                raise RuntimeError("Unrequested block received")
            else:
                raise RuntimeError("Not a valid header: {!r}".format(header))


def read_check(io, block, size):
    data, complete = io.read_all(size)
    if not complete:
        raise TransferError(block, "Short read")
    return data


def prepare(f, io, size, is_block, sanity_digest):
    remote_digest = read_check(io, 0, len(sanity_digest))
    if remote_digest != sanity_digest:
        raise RuntimeError('Remote script failed to execute properly')
        
    io.write(b'go')

    (remote_size,) = struct.unpack('<Q', io.read(8))
    if is_block:
        if remote_size > size:
            raise ValueError("Source data can't fit on the local device: {} < {} bytes".format(size, remote_size))
    else:
        if remote_size < size:
            raise ValueError('Destination file already bigger than source device: {} > {} bytes'.format(size, remote_size))
        f.truncate(remote_size)
    return remote_size

def transfer(f, io, size, remote_size, blocksize, offset_blocks, hash_total, hashname):  
    # Calculate number of blocks, including the last block which may be smaller
    blockcount = int((remote_size + blocksize - 1) / blocksize)

    receiver = receive_blocks(io, hash_total.digest_size)

    for i in range(offset_blocks, blockcount):
        f.seek(i * blocksize)
        # last read should be smaller if the destination is bigger than the source (block device)
        read_size = min(remote_size - i * blocksize, blocksize)
        block = f.read(read_size)
        block_hash = hashlib.new(hashname, block)
        local_digest = block_hash.digest()
        try:
            header, remote_digest = receiver.send(None)
            if header != b'd':
                raise RuntimeError(i, "Not a digest: {!r}".format(header))

            if remote_digest != local_digest:
                print('X', end='')
                sys.stdout.flush()
                io.write(b'send' + struct.pack('<Q', i))
                header, block, remote_total = receiver.send(read_size)
                if header != b'b':
                    raise RuntimeError("Not a block: %s" % header)
                hash_total.update(block)
                if remote_total != hash_total.digest():
                    raise RuntimeError("Total checksum mismatch")
                f.seek(i * blocksize)
                f.write(block)
            else:
                print('.', end='')
                sys.stdout.flush()
                hash_total.update(block)
        except TransferError as e:
            e.block_no = i
            raise e
    header, remote_digest_total = receiver.send(None)
    if header != b't':
        raise RuntimeError("Not a total digest: %s" % header)
    if remote_digest_total != hash_total.digest():
        raise RuntimeError('Checksum mismatch after transfer')


def bscp_retry(*args, offset_blocks=0, **kwargs):
    in_total = 0
    out_total = 0
    remote_size = None
    for i in range(3):
        try:
            in_bytes, out_bytes, remote_size_again, offset_blocks = bscp(*args, offset_blocks=offset_blocks, **kwargs)
            in_total += in_bytes
            out_total += out_bytes
            remote_size = remote_size if remote_size_again is None else remote_size_again
            if offset_blocks is None:
                break
        except TransferError as e:
            sys.stderr.write("Connection broken\n")
            offset_blocks = e.block_no
    return in_total, out_total, remote_size, offset_blocks


def bscp(local_filename, remote_host, remote_port, remote_filename, blocksize, hashname, compress=False, offset_blocks=0):
    hash_total = hashlib.new(hashname)
    with open(local_filename, 'rb+') as f:
        f.seek(0, os.SEEK_END)
        size = f.tell()
        f.seek(offset_blocks*blocksize)

        is_block = Path(local_filename).is_block_device()

        remote_command = 'python3 -c {}'.format(shlex.quote(remote_script))
        command = ('ssh',
                   '-C',
                   '-p', str(remote_port),
                   '--', remote_host, remote_command)
        p = subprocess.Popen(command, stdin=subprocess.PIPE, stdout=subprocess.PIPE)

        bremote_filename = remote_filename.encode('utf-8')
        bhashname = hashname.encode('utf-8')
        io = IOCounter(p.stdout, p.stdin)

        io.write(struct.pack('<QQQQQ',
            size,
            blocksize,
            offset_blocks,
            len(bremote_filename),
            len(bhashname),
        ))
        io.write(bremote_filename)
        io.write(bhashname)

        sanity_digest = hashlib.new(hashname, bremote_filename).digest()

        remote_size = None
        try:
            remote_size = prepare(f, io, size, is_block, sanity_digest)
            transfer(f, io, size, remote_size, blocksize, offset_blocks, hash_total, hashname)
        except TransferError as e:
            p.stdin.close()
            p.wait() # Let the process end
            return (io.in_total, io.out_total, remote_size, e.block_no)
        else:
            p.stdin.close()
            code = p.wait()
            if code != 0:
                raise RuntimeError("Remote connection didn't complete")
    return (io.in_total, io.out_total, remote_size, None)

if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--hash_name', choices=['sha1'], default='sha1',
                        help='Hash function name')
    parser.add_argument('--block_size', '-b', type=int, default=64*1024,
                        help='Block size (bytes)')
    parser.add_argument('--block_offset', '-o', type=int, default=0,
                        help='Offset in blocks')
    parser.add_argument('--compress', '-c', action='store_true')
    parser.add_argument('--port', '-p', type=int, default=22)
    parser.add_argument('src', help='Source block device (remote)')
    parser.add_argument('dest', help='Destination file (local)')
    args = parser.parse_args()

    (remote_host, remote_filename) = args.src.split(':')

    (in_total, out_total, size, next_block) = bscp_retry(
        args.dest, remote_host, args.port,
        remote_filename,
        args.block_size,
        args.hash_name,
        compress=args.compress,
        offset_blocks=args.block_offset)
    speedup = '?'
    if size:
        if next_block:
            done_bytes = (next_block - args.block_offset) * args.block_size
        else:
            done_bytes = size
        speedup = done_bytes / (in_total + out_total)
    sys.stderr.write('\nin=%i out=%i size=%i speedup=%.2f\n' % (in_total, out_total, size, speedup))
    if next_block is not None:
        sys.stderr.write("Stopped before completing block {}\n".format(next_block))
